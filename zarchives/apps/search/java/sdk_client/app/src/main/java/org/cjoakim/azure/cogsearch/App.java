/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.cjoakim.azure.cogsearch;

import com.azure.core.credential.AzureKeyCredential;

import com.azure.search.documents.SearchClientBuilder;
import com.azure.search.documents.SearchClient;
import com.azure.search.documents.SearchDocument;
import com.azure.search.documents.indexes.SearchIndexAsyncClient;
import com.azure.search.documents.indexes.SearchIndexClient;
import com.azure.search.documents.indexes.SearchIndexClientBuilder;
import com.azure.search.documents.indexes.SearchIndexerAsyncClient;
import com.azure.search.documents.indexes.SearchIndexerClient;
import com.azure.search.documents.indexes.SearchIndexerClientBuilder;
import com.azure.search.documents.indexes.models.IndexDocumentsBatch;
import com.azure.search.documents.indexes.models.LexicalAnalyzerName;
import com.azure.search.documents.indexes.models.SearchField;
import com.azure.search.documents.indexes.models.SearchFieldDataType;
import com.azure.search.documents.indexes.models.SearchIndex;
import com.azure.search.documents.indexes.models.SearchSuggester;
import com.azure.search.documents.models.SearchOptions;
import com.azure.search.documents.models.SearchResult;
import com.azure.search.documents.util.SearchPagedIterable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Example use of the Azure Cognitive Search client library for Java
 * @see https://docs.microsoft.com/en-us/java/api/overview/azure/search-documents-readme?view=azure-java-stable
 * @see https://search.maven.org/artifact/com.azure/azure-search-documents/11.4.5/jar
 * @see https://search.maven.org/
 * @see
 *
 * @author Chris Joakim, Microsoft, December 2021
 */
public class App {

    private String execute(String[] args) {

        log("execute, args length: " + args.length);

        String function = args[0];
        switch (function) {
            case "runIndexer":
                String name = args[1];
                this.runIndexer(name);
                break;
            case "search":
                String indexName  = args[1];
                String searchName = args[2];
                this.search(indexName, searchName);
                break;
            case "push":
                String iataCode = args[1];
                pushAirportDocumentToIndex(iataCode);
                break;
            default:
                log("undefined function in main(): " + function);
                break;
        }
        return function;
    }

    private void runIndexer(String name) {

        SearchIndexerClient client = createSearchIndexerClient();
        client.runIndexer(name);
        log("runIndexer: " + name + " submitted");
    }

    private void search(String indexName, String searchName) {

        log("search; indexName: " + indexName + ", searchName: " + searchName);

        SearchClient client = createSearchClient(indexName);
        log("client; endpoint: " + client.getEndpoint() + ", index: " + client.getIndexName());

        switch (searchName) {
            case "All":
                executeSearch(client, "*");
                break;
            case "CLT":
                executeSearch(client, "CLT");
                break;
            case "Charlotte":
                executeSearch(client, "Charlotte");
                break;
            default:
                log("undefined searchName in search(): " + searchName);
                break;
        }
    }

    private ArrayList<SearchDocument> executeSearch(SearchClient client, String query) {
        ArrayList<SearchDocument> results = new ArrayList<SearchDocument>();
        try {
            for (SearchResult searchResult : client.search(query)) {
                SearchDocument doc = searchResult.getDocument(SearchDocument.class);
                results.add(doc);
                log("---");
                log(doc.toString());
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        log("---");
        log("" + results.size() + " document(s) returned");
        return results;
    }

    private void pushAirportDocumentToIndex(String iataCode) {
        // https://docs.microsoft.com/en-us/java/api/overview/azure/search-documents-readme?view=azure-java-stable#adding-documents-to-your-index

        try {
            JsonObject obj = lookupIataInAirportsFile(iataCode);
            if (obj != null) {
                log("obj: " + obj.toString());
                Airport airport = new Airport(obj);

                Gson gson = new GsonBuilder().setPrettyPrinting().create();
                log("airport: " + gson.toJson(airport));

                SearchClient client = createSearchClient("airports");
                IndexDocumentsBatch<Airport> batch = new IndexDocumentsBatch<>();
                batch.addMergeOrUploadActions(Collections.singletonList(airport));
                client.indexDocuments(batch);

                // Also:
                // batch.addUploadActions(Collections.singletonList(a));
                // batch.addMergeActions(Collections.singletonList(a);
            }
            else {
                log("not found");
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    private JsonObject lookupIataInAirportsFile(String iataCode) throws Exception {
        String fileName = "src/main/resources/us_airports.json";
        Path path = Paths.get(fileName);
        log("path: " + path);

        try (Reader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
            JsonParser  parser = new JsonParser();
            JsonElement tree   = parser.parse(reader);
            JsonArray   array  = tree.getAsJsonArray();

            for (JsonElement element: array) {
                if (element.isJsonObject()) {
                    JsonObject obj = element.getAsJsonObject();
                    String iata = obj.get("iata_code").getAsString();
                    if (iataCode.equals(iata)) {
                        return obj;
                    }
                }
            }
        }
        return null;
    }

    private SearchClient createSearchClient(String indexName) {

        String endpoint = envvar("AZURE_SEARCH_URL");
        String apiKey   = envvar("AZURE_SEARCH_ADMIN_KEY");
        log("createSearchIndexClient endpoint: " + endpoint);
        log("createSearchIndexClient apiKey:   " + apiKey);

        return new SearchClientBuilder()
                .endpoint(endpoint)
                .credential(new AzureKeyCredential(apiKey))
                .indexName(indexName)
                .buildClient();
    }

    private SearchIndexClient createSearchIndexClient() {

        String endpoint = envvar("AZURE_SEARCH_URL");
        String apiKey   = envvar("AZURE_SEARCH_ADMIN_KEY");
        log("createSearchIndexClient endpoint: " + endpoint);
        log("createSearchIndexClient apiKey:   " + apiKey);

        return new SearchIndexClientBuilder()
            .endpoint(endpoint)
            .credential(new AzureKeyCredential(apiKey))
            .buildClient();
    }

    private SearchIndexerClient createSearchIndexerClient() {

        String endpoint = envvar("AZURE_SEARCH_URL");
        String apiKey   = envvar("AZURE_SEARCH_ADMIN_KEY");
        log("createSearchIndexerClient endpoint: " + endpoint);
        log("createSearchIndexerClient apiKey:   " + apiKey);

        return new SearchIndexerClientBuilder()
             .endpoint(endpoint)
             .credential(new AzureKeyCredential(apiKey))
             .buildClient();
    }


    private static String envvar(String name) {

        return System.getenv(name);
    }

    private static void log(String msg) {

        System.out.println(msg);
    }

    public static void main(String[] args) {

        try {
            new App().execute(args);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
}
